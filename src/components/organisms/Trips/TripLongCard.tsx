'use client';

import { 
  Divider, 
  Heading2, 
  Heading4, 
  Icons, 
  Heading5 
} from "@/src/components/atoms";
import {
  IconButton,
  SaveButton,
  LikeButton,
} from "@/src/components/molecules";
import { CardImagesSection, Tab } from "@/src/components/organisms";
import { useCopyUrlToClipboard } from "@/src/hooks";
import { Routes } from "@/src/lib/constants";
import { ICard, ICardTabs } from "@/src/services";
import { useUser } from "@/src/store/user";
import { useRouter } from "next/navigation";
import { memo, useState } from "react";
import CreateReportModal from "../Modals/CreateReportModal";

type Props = {
  card: ICard;
};

const TripLongCard: React.FC<Props> = ({ card }) => {
  const tabs: ICardTabs = {
    'Description': card.description,
    'Why this place?': card.whyThisPlace,
    'Map': { latitude: card.latitude, longitude: card.longitude},
  };

  const [isCopied, copy] = useCopyUrlToClipboard(Routes.TRIP(card.id));
  const [isReportCardModal, setIsReportCardModal] = useState(false);
  const { user } = useUser();
  const { push } = useRouter();

  const isCardCreatedByUser = card.author === user?.pseudonym;

  return (
    <article
      className="flex flex-col gap-2
      justify-between items-center"
    >
      <Heading2 text={card.name} classes="self-start mb-1" font="semibold" />

      <div className="grid grid-cols-12 gap-y-5 gap-x-6">
        <div className="col-span-5 row-span-1">
          <div className="w-full flex gap-2">
            <Icons.location className="w-8 h-8" />
            <Heading4 text={card.whereIs} font="normal"/>
          </div>
        </div>

        <div className="col-span-7 row-span-1 self-end">
          <div className="flex gap-4 w-full justify-end h-8 relative">
            {isCopied && (
              <span 
                className="absolute flex justify-center items-center 
              bg-white  rounded-2xl bottom-[44px] right-0 py-2 px-6"
              >
                <Heading5 
                  text="Copied to clipboard!" 
                  font="medium" 
                  classes="text-gray-80" 
                />
              </span>
            )}

            <LikeButton
              cardId={card.id}
              cardLikes={card.likes}
              classes=""
            />

            <Divider classes="h-full w-px" />

            <IconButton
              icon={card.author === "AI" 
                ? <Icons.jpt className="w-5 h-5" /> 
                : <Icons.user className="w-5 h-5" />
              }
              text={
                card.author === "AI" ? "Generated by AI" : card.author
              }
              classes="bg-black text-white rounded-full gap-2"
            />

            <IconButton
              icon={<Icons.report className="w-5 h-5" />}
              text="Report Issue"
              classes="bg-transparent border border-error 
              text-error rounded-full"
              onClick={() => setIsReportCardModal(true)}
            />

            {isCardCreatedByUser && (
              <>
                <Divider classes="h-full w-px" />

                <IconButton 
                  icon={<Icons.edit className="w-6 h-6" />} 
                  classes=""
                  onClick={() => push(Routes.MY_CARDS.EDIT(card.id))}
                />
              </>
            )}

            <Divider classes="h-full w-px" />

            <IconButton 
              icon={<Icons.share className="w-6 h-6" />} 
              onClick={copy}
              classes=""
            />
          </div>
        </div>

        <div className="col-span-5 row-span-1 flex flex-col gap-6">
          <div 
            className="border-2 border-gray-300 rounded-3xl 
            p-8 bg-white max-h-[546px] overflow-hidden"
          >
            <Tab tabs={tabs} location="Page" />
          </div>
          <SaveButton cardId={card.id} />
        </div>

        <div className="col-span-7 row-span-1">
          <CardImagesSection images={card.imageLinks} />
        </div>
      </div>

      {isReportCardModal && (
        <CreateReportModal 
          type="Card" 
          onClose={() => setIsReportCardModal(false)} 
        />
      )}
    </article>
  );
};

export default memo(TripLongCard);
