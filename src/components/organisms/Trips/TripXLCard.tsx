"use client";

import { 
  TripImage, 
  IconButton, 
  LikeButton, 
  SaveButton 
} from "@/src/components/molecules";
import { 
  TextMedium,
  Heading2, 
  TextBase, 
  Heading5, 
  Divider, 
  Icons 
} from "@/src/components/atoms";
import { Tab, CreateReportModal } from "@/src/components/organisms";
import { useCopyUrlToClipboard } from "@/src/hooks";
import { Routes } from "@/src/lib/constants";
import { ICard, ICardTabs } from "@/src/services";
import Link from "next/link";
import { memo, useState } from "react";


type Props = {
  card: ICard;
};

const TripXLCard: React.FC<Props> = ({ card }) => {
  const [isCopied, copy] = useCopyUrlToClipboard(Routes.TRIP(card.id));
  const [isReportCardModal, setIsReportCardModal] = useState(false);
  const tabs: ICardTabs = {
    'Description': card.description,
    'Why this place?': card.whyThisPlace,
    'Distance': { value: card.distance, mapsLink: card.mapLink },
  };

  return (
    <article
      className="flex flex-col gap-3 items-center justify-between 
      rounded-3xl overflow-hidden bg-white w-[596px] mb-8"
    >
      <Link 
        href={Routes.TRIP(card.id)} 
        className="relative w-full pb-[50%] mb-1"
      >
        <TripImage 
          imageLinks={card.imageLinks} 
          alt={card.name} 
          sizes="(max-width: 768px) 100vw, 50vw"
        />

        {isCopied && (
          <span 
            className="absolute flex justify-center items-center 
              bg-white rounded-2xl inset-x-8 top-8 py-2 px-6"
          >
            <Heading5 
              text="Copied to clipboard!" 
              font="medium" 
              classes="text-gray-80" 
            />
          </span>
        )}
      </Link>

      <div className="w-full px-8 pb-8 flex flex-col gap-3">
        <div className="w-full overflow-x-scroll flex gap-1">
          {card.tripTypes.map(tripType => (
            <TextMedium 
              key={tripType}
              text={tripType}
              font="normal"
              classes="rounded-full bg-gray-20 text-gray-80 px-3 py-1"
            />
          ))}
        </div>

        <div className="w-full flex flex-col gap-1">
          <Heading2 text={card.name} classes="self-start" font="semibold" />

          <div className="w-full flex gap-2 items-center mb-1">
            <Icons.location className="w-5 h-5 shrink-0" />
            <TextBase text={card.whereIs} font="medium"/>
          </div>
        </div>

        <Tab tabs={tabs} location="Card" />

        <Divider />

        <div className="w-full flex gap-4 justify-between items-center">
          <IconButton
            icon={card.author === "AI" 
              ? <Icons.jpt className="w-5 h-5 text-black" /> 
              : <Icons.user className="w-5 h-5 text-black" />
            }
            text={
              card.author === "AI" ? "Generated by AI" : `Posted by ${card.author}`
            }
            classes="text-gray-80 gap-2"
          />
            
          <LikeButton
            cardId={card.id}
            cardLikes={card.likes}
            classes="text-gray-80 gap-2"
          />

          <IconButton 
            icon={<Icons.share className="w-5 h-5 text-black" />} 
            onClick={copy}
            text="Share"
            classes="text-gray-80 gap-2"
          />

          <IconButton
            icon={<Icons.report className="w-5 h-5 text-black" />}
            text="Report"
            classes="text-gray-80 gap-2"
            onClick={() => setIsReportCardModal(true)}
          />
        </div>

        <Divider classes="mb-2" />

        <SaveButton cardId={card.id} />
      </div>

      {isReportCardModal && (
        <CreateReportModal 
          type="Card" 
          onClose={() => setIsReportCardModal(false)} 
        />
      )}
    </article>
  );
};

export default memo(TripXLCard);